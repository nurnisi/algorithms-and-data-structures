class Solution:
    # TLE
    def largestPerimeter2(self, A):
        n, ans = len(A), 0
        for i in range(n):
            for j in range(i+1, n):
                for k in range(j+1, n):
                    if self.nonzeroArea(A[i], A[j], A[k]):
                        ans = max(ans, A[i] + A[j] + A[k])
        
        return ans

    def nonzeroArea(self, a, b, c):
        return (a + b - c) > 0 and (b + c - a) > 0 and (a + c - b) > 0

    # Accepted
    def largestPerimeter(self, A):
        A.sort(reverse=True)
        n = len(A)
        for i in range(n-2):
            j = i + 2
            while j < n and A[i] - A[i+1] - A[j] > 0:
                j += 1
            if j < n and A[i] - A[i+1] - A[j] < 0:
                return A[i] + A[i+1] + A[j]
        return 0

sol = Solution()
print(sol.largestPerimeter([2,1,2]))
print(sol.largestPerimeter([1,1,2]))
print(sol.largestPerimeter([3,2,3,4]))
print(sol.largestPerimeter([3,6,2,3]))
print(sol.largestPerimeter([630327,977771,886298,442876,875287,212547,53606,749369,927611,484803,330993,119910,965120,793661,327159,514102,166458,29715,265518,602994,698844,792837,279395,370990,867946,414007,245663,360232,42844,51809,838406,148846,71879,967446,318756,218018,521200,948115,991192,71377,685498,257056,325405,360755,555205,20238,926667,734897,283179,600352,999391,226988,742036,647102,24732,768197,753172,625330,331126,774929,72004,849823,704008,282608,998888,491176,262789,88859,533314,877789,608798,557114,954655,895076,641705,228959,98767,377083,19663,533217,331151,421142,866200,799805,105244,725210,622390,50842,182302,88185,189876,956497,472610,845940,576345,829942,91869,318876,131078,522648,351996,681676,379596,262438,752218,815776,662018,800553,767771,800816,148842,593094,920215,889722,518413,884571,370042,574217,867496,3829,329592,749515,258265,68820,75148,219204,717251,351451,981999,265457,391304,537153,385223,501555,65148,861617,829249,427139,958029,51954,684563,775834,171190,18357,364266,826919,568816,330315,305457,623666,624033,328067,385153,292377,922427,324533,29580,959349,337759,709239,90365,418881,554987,609459,650820,682552,882829,173845,925801,862276,40910,924627,908662,527384,190116,231682,202769,529239,489271,283107,746978,639722,832906,479526,123897,760336,228787,434494,838579,167953,776147,308949,5945,3037,20623,859160,476177,990279,217296,194356,392047,101490,815858,390245,356358,612475,547088,401963,641998,146556,293554,902698,32255,572298,987674,795793,117468,942090,615681,930037,51126,74232,60445,845414,674646,700085,949957,364534,748844,499021,374757,540154,211397,621145,289315,568442,466600,764384,32722,245423,729563,224222,20640,440039,14744,309872,159230,901471,385085,691499,74061,998469,484354,607676,541911,774197,321589,644073,620148,144696,207770,824108,638675,595589,947770,764134,972752,947357,15504,551453,554002,196077,931164,718097,615874,507945,608620,215042,320548,730018,909902,144293,613850,448609,468149,996358,715138,874348,59831,336310,851445,304054,717186,814054,415153,509949,498067,802974,417892,406900]))
